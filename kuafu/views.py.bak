#coding:utf-8
from django.shortcuts import render
from django.shortcuts import render_to_response
from django.http import HttpResponse, HttpResponseRedirect
from .forms import UploadFileForm
from django.template import RequestContext
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.csrf import csrf_protect
#from somewhere import handle_uploaded_file

from ctime.views import *
import MySQLdb
import paramiko
import ansible.runner
import sys
import os
from ctime.mysql import *

def controlOpsKF(conName):
	hostip = '120.92.232.1'
	print hostip,conName
	results = ansible.runner.Runner(
		pattern = '%s' % hostip, forks = 5,
		module_name = 'shell', module_args = 'cd /data/game/kfmanager; sh %s.sh' % conName
	).run()
	if results is None:
		return render(request, "kuafu.html")

def cleanOpsDb(hostip):
        dbconfig={'host':'%s' % hostip,
        'port': 3306,
        'user':'root',
        'passwd':'5aRW7x8gFGNUB0dt',
        'db':'cqss_kf_new',
        'charset':'utf8'}
	tableList = []
	db = mysql.MySQL(dbconfig)
	db.query("show tables")
	result = db.fetchAllRows()
	for row in result:
		for colum in row:
			tableList.append(colum)
	tableList.remove(c_server)
	for table in tableList:
		db.update("truncate table %s") % table
	db.close()

def cleanGamedb(hostip):
	results = ansible.runner.Runner(
		pattern = '%s' % hostip, fork = 5,
		module_name = 'shell', module_args = 'cd /data/script/cleanBattleDate; sh clean_gameKF.sh'
	)
	if results is None:
		return render(request, "kuafu.html")

@csrf_exempt
@csrf_protect
def upload_file(request):
	from django import forms
	class UploadFileForm(forms.Form):
		title = forms.CharField(max_length=100000)
		file = forms.FileField()
	if request.method == 'POST':
		f = handle_uploaded_file(request.FILES['file'])
		print f.name
	return render_to_response('kuafu.html',context_instance=RequestContext(request))

def handle_uploaded_file(f):
        file_name = ""
        try:
                path='/data/ssyw/upload/kuafu/'
                if not os.path.exists(path):
                        os.makedirs(path)
                file_name = path+f.name
                with open(file_name, 'wb+') as destination:
                     	for chunk in f.chunks():
                               	destination.write(chunk)
                        #destination.close()
        except Exception,e:
                print e
        return f

@csrf_exempt
@csrf_protect
def update_file(request):
	src = ""
	dest = ""
	option = ""
	hostip = ""
	render(request, 'kuafu.html')
	if request.method == 'POST':
		f = handle_uploaded_file(request.FILES['file'])
		src = '/data/ssyw/upload/kuafu/'+f.name
		option = request.POST.get('option')
	if option == 'ops':
		#dest = '/data/game/kfmanager/data/'
		dest = '/data/game/kfmanager/'
		hostip = '120.92.232.1'
	elif option == 'client':
		#dest = '/data/game/kuafu/client/assets/data/'
		dest = '/data/game/kuafu/'
		hostip = '119.29.138.253'
	elif option == 'server':
		dest = '/data/game/s9994'
		hostip = '119.29.138.253'
	if src and dest and hostip:
        	results = ansible.runner.Runner(
                	pattern = '%s' % hostip, forks = 5,
                	module_name = 'copy', module_args = 'src=%s dest=%s' %(src,dest)
        	).run()
		if option == 'ops':
			controlOpsKF(conName='stop')
			controlOpsKF(conName='start')
        #if results is None:
	#	print "error"
        #        return render(request, "error.html")

	conName = request.GET.get('conName')
	if conName:
		controlOpsKF(conName)	
	#else:
	#	return HttpResponse('error')

	return render_to_response('kuafu.html',context_instance=RequestContext(request))
